"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var react_native_navigation_1 = require("react-native-navigation");
var contexts_1 = require("../contexts");
var triggerIfComponentIdMatches_1 = __importDefault(require("../helpers/triggerIfComponentIdMatches"));
var extractComponentIdFromArgs_1 = __importDefault(require("../helpers/extractComponentIdFromArgs"));
var isString_1 = __importDefault(require("../helpers/isString"));
var warnIfMissingComponentId_1 = __importDefault(require("../helpers/warnIfMissingComponentId"));
/**
 * Registers listener to be called when a TopBar button is pressed by the user.
 * [more info](https://wix.github.io/react-native-navigation/api/events/#navigationbuttonpressed-event)
 */
function useNavigationButtonPress(handler, componentIdOrOptions, buttonIdFromArgs) {
    if (componentIdOrOptions === void 0) { componentIdOrOptions = {}; }
    var global = componentIdOrOptions.global;
    var buttonId = isString_1.default(buttonIdFromArgs) ? buttonIdFromArgs : componentIdOrOptions.buttonId;
    var componentId = react_1.useContext(contexts_1.NavigationContext).componentId;
    componentId = componentId || extractComponentIdFromArgs_1.default(componentIdOrOptions);
    warnIfMissingComponentId_1.default('useNavigationButtonPress', componentId, global);
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerNavigationButtonPressedListener(function (event) {
            if (buttonId && event.buttonId !== buttonId) {
                return;
            }
            triggerIfComponentIdMatches_1.default(handler, event, componentId);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId, buttonId]);
}
exports.default = useNavigationButtonPress;
//# sourceMappingURL=useNavigationButtonPress.js.map