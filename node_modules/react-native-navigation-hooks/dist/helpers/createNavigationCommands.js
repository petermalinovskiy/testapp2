"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_navigation_1 = require("react-native-navigation");
var createLayout_1 = __importDefault(require("./createLayout"));
var setRoot_1 = __importDefault(require("./setRoot"));
var showModal_1 = __importDefault(require("./showModal"));
var showOverlay_1 = __importDefault(require("./showOverlay"));
/**
 * Creates a set of action helpers for
 * [component](https://wix.github.io/react-native-navigation/api/component),
 * [root](https://wix.github.io/react-native-navigation/api/root),
 * [stack](https://wix.github.io/react-native-navigation/api/stack),
 * [modal](https://wix.github.io/react-native-navigation/api/modal),
 * [overlay](https://wix.github.io/react-native-navigation/api/overlay)
 * Navigation API exposing multiple function types for the each function as a list of overloads.
 */
function createNavigationCommands(
/**
 * Component reference id. Used to give context to the Navigation functions that requires componentId parameter.
 */
componentId) {
    function setStackRoot(nameOrLayout, passProps, options) {
        var layout = typeof nameOrLayout === 'string' ? createLayout_1.default(nameOrLayout, passProps, options) : nameOrLayout;
        return react_native_navigation_1.Navigation.setStackRoot(componentId, layout);
    }
    function push(nameOrLayout, passProps, options) {
        var layout = typeof nameOrLayout === 'string' ? createLayout_1.default(nameOrLayout, passProps, options) : nameOrLayout;
        return react_native_navigation_1.Navigation.push(componentId, layout);
    }
    function mergeOptions(options) {
        return react_native_navigation_1.Navigation.mergeOptions(componentId, options);
    }
    function updateProps(props) {
        return react_native_navigation_1.Navigation.updateProps(componentId, props);
    }
    // eslint-disable-next-line no-shadow
    function dismissModal(mergeOptions) {
        return mergeOptions ? react_native_navigation_1.Navigation.dismissModal(componentId, mergeOptions) : react_native_navigation_1.Navigation.dismissModal(componentId);
    }
    // eslint-disable-next-line no-shadow
    function pop(mergeOptions) {
        return mergeOptions ? react_native_navigation_1.Navigation.pop(componentId, mergeOptions) : react_native_navigation_1.Navigation.pop(componentId);
    }
    // eslint-disable-next-line no-shadow
    function popTo(mergeOptions) {
        return mergeOptions ? react_native_navigation_1.Navigation.popTo(componentId, mergeOptions) : react_native_navigation_1.Navigation.popTo(componentId);
    }
    // eslint-disable-next-line no-shadow
    function popToRoot(mergeOptions) {
        return mergeOptions ? react_native_navigation_1.Navigation.popToRoot(componentId, mergeOptions) : react_native_navigation_1.Navigation.popToRoot(componentId);
    }
    function dismissOverlay() {
        return react_native_navigation_1.Navigation.dismissOverlay(componentId);
    }
    var setDefaultOptions = react_native_navigation_1.Navigation.setDefaultOptions, dismissAllModals = react_native_navigation_1.Navigation.dismissAllModals, getLaunchArgs = react_native_navigation_1.Navigation.getLaunchArgs;
    return {
        setStackRoot: setStackRoot,
        push: push,
        mergeOptions: mergeOptions,
        updateProps: updateProps,
        dismissModal: dismissModal,
        pop: pop,
        popTo: popTo,
        popToRoot: popToRoot,
        dismissOverlay: dismissOverlay,
        setRoot: setRoot_1.default,
        showModal: showModal_1.default,
        showOverlay: showOverlay_1.default,
        setDefaultOptions: setDefaultOptions,
        dismissAllModals: dismissAllModals,
        getLaunchArgs: getLaunchArgs,
    };
}
exports.default = createNavigationCommands;
//# sourceMappingURL=createNavigationCommands.js.map