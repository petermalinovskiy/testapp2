"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractEventBuilder = void 0;
const isUndefined_1 = __importDefault(require("lodash/isUndefined"));
const omitBy_1 = __importDefault(require("lodash/omitBy"));
const utils_1 = require("../utils");
class AbstractEventBuilder {
    constructor() {
        this._callSend = (event) => {
            this.send(omitBy_1.default(this.defaults(event), isUndefined_1.default));
        };
    }
    begin(event) {
        const { args, tts, ts, cat, name, sf, cname, pid, tid, stack } = this.defaults(event);
        this._callSend({
            ph: 'B',
            args,
            tts,
            ts,
            cat,
            name,
            sf,
            cname,
            pid,
            tid,
            stack,
        });
    }
    beginAsync(event) {
        const { args, cat, name, pid, tid, ts, tts, cname, id, id2, scope } = this.defaults(event);
        this._callSend({
            ph: 'b',
            args,
            cat,
            name,
            pid,
            tid,
            ts,
            tts,
            cname,
            id,
            id2,
            scope,
        });
    }
    complete(event) {
        const { tid, pid, ts, args, tts, sf, cname, dur, stack, esf, cat, name, tdur, estack } = this.defaults(event);
        this._callSend({
            ph: 'X',
            args,
            cat,
            cname,
            dur,
            esf,
            estack,
            name,
            pid,
            sf,
            stack,
            tdur,
            tid,
            ts,
            tts,
        });
    }
    counter(event) {
        const { args, cat, cname, pid, tid, ts, tts, name, id } = this.defaults(event);
        this._callSend({ ph: 'C', args, cat, cname, pid, tid, ts, tts, name, id });
    }
    end(event = {}) {
        const { args, tts, ts, sf, cname, pid, tid, stack } = this.defaults(event);
        this._callSend({ ph: 'E', args, tts, ts, sf, cname, pid, tid, stack });
    }
    endAsync(event) {
        const { args, tts, tid, ts, pid, cname, id, id2, scope, cat, name } = this.defaults(event);
        this._callSend({
            ph: 'e',
            args,
            tts,
            tid,
            ts,
            pid,
            cname,
            id,
            id2,
            scope,
            cat,
            name,
        });
    }
    instant(event) {
        const { args, sf, cname, pid, tid, ts, tts, cat, name, s, stack } = this.defaults(event);
        this._callSend({
            ph: 'i',
            args,
            cat,
            cname,
            name,
            pid,
            s,
            sf,
            stack,
            tid,
            ts,
            tts,
        });
    }
    instantAsync(event) {
        const { args, cat, name, pid, tid, ts, tts, cname, id, id2, scope } = this.defaults(event);
        this._callSend({
            ph: 'n',
            args,
            cat,
            name,
            pid,
            tid,
            ts,
            tts,
            cname,
            id,
            id2,
            scope,
        });
    }
    metadata(event) {
        const { args, tts, ts, tid, pid, cname, cat, name } = this.defaults(event);
        this._callSend({ ph: 'M', args, tts, ts, tid, pid, cname, cat, name });
    }
    process_labels(labels, pid) {
        this.metadata({
            pid,
            name: 'process_labels',
            args: { labels: labels.join(',') },
        });
    }
    process_name(name, pid) {
        this.metadata({
            pid,
            name: 'process_name',
            args: { name },
        });
    }
    process_sort_index(index, pid) {
        this.metadata({
            pid,
            name: 'process_sort_index',
            args: { sort_index: index },
        });
    }
    thread_name(name, tid, pid) {
        this.metadata({
            pid,
            tid,
            name: 'thread_name',
            args: { name },
        });
    }
    thread_sort_index(index, tid, pid) {
        this.metadata({
            pid,
            tid,
            name: 'thread_sort_index',
            args: { sort_index: index },
        });
    }
    defaults(event) {
        const { ts = utils_1.now(), pid = utils_1.getProcessId(), tid = 0 } = event;
        return {
            ...event,
            ts,
            pid,
            tid,
        }; // eslint-disable-line @typescript-eslint/no-explicit-any
    }
}
exports.AbstractEventBuilder = AbstractEventBuilder;
//# sourceMappingURL=index.js.map