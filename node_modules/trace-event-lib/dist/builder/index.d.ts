import { AsyncEndEvent, AsyncInstantEvent, AsyncStartEvent, CompleteEvent, CounterEvent, DurationBeginEvent, DurationEndEvent, Event, InstantEvent, MetadataEvent } from '../schema';
export declare type OmitOptionally<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type Completable<T extends Event> = OmitOptionally<T, 'ts' | 'pid' | 'tid'>;
export declare type Simplified<T extends Event> = OmitOptionally<T, 'ts' | 'pid' | 'tid' | 'ph'>;
export declare type AutocompletedEventFields = Pick<Event, 'ts' | 'pid' | 'tid'>;
export declare abstract class AbstractEventBuilder {
    begin(event: Simplified<DurationBeginEvent>): void;
    beginAsync(event: Simplified<AsyncStartEvent>): void;
    complete(event: Simplified<CompleteEvent>): void;
    counter(event: Simplified<CounterEvent>): void;
    end(event?: Simplified<DurationEndEvent>): void;
    endAsync(event: Simplified<AsyncEndEvent>): void;
    instant(event: Simplified<InstantEvent>): void;
    instantAsync(event: Simplified<AsyncInstantEvent>): void;
    metadata<T extends MetadataEvent>(event: Simplified<T>): void;
    process_labels(labels: string[], pid?: number): void;
    process_name(name: string, pid?: number): void;
    process_sort_index(index: number, pid?: number): void;
    thread_name(name: string, tid?: number, pid?: number): void;
    thread_sort_index(index: number, tid?: number, pid?: number): void;
    protected defaults<T extends Partial<Event>>(event: T): T & AutocompletedEventFields;
    private readonly _callSend;
    protected abstract send<T extends Event>(event: T): void;
}
